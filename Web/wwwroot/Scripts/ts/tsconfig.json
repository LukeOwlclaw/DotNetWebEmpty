{
  "Note1": "This is the configuration file for TypeScript used by Visual Studio.",
  "Note2": "Within this folder and all sub-folders, all TS are transpiled to JS and saved to folder r/",
  "Note3": "requireJS is configured to look for JS modules in folder r/. This is configured in _RequireJS.cshtml",
  "Note4": "Imported modules also need to be copied to r/. This is done by r/_copy_from_node_modules.bat",
  //"format": "verbose",
  "compilerOptions": {
    // Raise error on expressions and declarations with an implied any type.
    "noImplicitAny": true,
    // needed for importing jQuery -> https://stackoverflow.com/questions/35345760/importing-jqueryui-with-typescript-and-requirejs#comment-83427905
    "allowSyntheticDefaultImports": true,
    // Report errors for fallthrough cases in switch statement.
    "noFallthroughCasesInSwitch": true,
    //	Report error when not all code paths in function return a value.
    "noImplicitReturns": true,
    // Raise error on this expressions with an implied any type.
    "noImplicitThis": true,
    // Report errors on unused locals.
    "noUnusedLocals": true,
    // Report errors on unused parameters.
    "noUnusedParameters": true,
    // Set to true, to prevent building on JS/TS syntax error.
    "noEmitOnError": true,
    // Remove all comments except copy-right header comments beginning with /*!
    "removeComments": true,
    // Generates corresponding .map file.
    "sourceMap": true,
    // Translate JSX code within .tsx files to JS React code
    "jsx": "react",
    // Specify ECMAScript target version. Must be ES5 because IE does not support ES6
    "target": "es5",
    // Only ES5 is supported by IE<11. Do not use ES6!
    "lib": [ "es5", "dom" ],
    // Defines how TypeScript creates modules. For Require.JS use AMD -> https://www.typescriptlang.org/docs/handbook/modules.html#code-generation-for-modules
    // Note: UMD is AMD compatible but causes concurrency issues -> http://requirejs.org/docs/errors.html#notloaded
    "module": "amd",
    // Tells TypeScript where to look for modules -> https://www.typescriptlang.org/docs/handbook/module-resolution.html#how-nodejs-resolves-modules
    "moduleResolution": "node",
    "outDir": "../r/",
    // Fix root dir to location of tsconfig.json. This makes sure that it will not move when TS files outside of root
    // are trying to be imported; instead an error will be raised. -->
    // https://github.com/Microsoft/TypeScript/wiki/FAQ#why-does---outdir-moves-output-after-adding-a-new-file
    // Note: TS files generated by extension TypeScriptDefinitionGenerator can be moved 
    // by manually editing <LastGenOutput> attribute in project file.
    "rootDir": ".",
    // Only transpile *.ts files. We do not support JS here in folder ts/.
    "allowJs": false,
    // TypeScript creates by default inline helper functions, e.g. __extends. 'importHelpers' prevents repeated loading of
    // those helpers (mainly in components bundle file) by import external file tslib.js (included in components bundle!)
    "importHelpers": true,
    "strictNullChecks": true,
    "noUncheckedIndexedAccess": true,
    "strict": true
  },
  "exclude": [
    "node_modules",
    "Models",
    "**/*.generated.ts"
    ],
  "compileOnSave": true,
  "typingOptions": {
    "enableAutoDiscovery": true
  }
}
