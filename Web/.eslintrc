{
  "root": true,
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 6,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true // Allows support of JSX, but use of React plugin is required to support React semantics
    }
  },
  "ignorePatterns": [ "wwwroot/lib/**.*", "*.generated.ts", ".eslintrc.js" ],
  // @typescript-eslint/parser is specified as a command line argument
  "plugins": [
    "node",
    "promise",
    "react",
    "@typescript-eslint",
    "prefer-arrow",
    "total-functions"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:total-functions/recommended"
  ],
  "env": {
    "amd": true,
    "browser": true,
    "jquery": true,
    "node": true,
    "es6": true, // This enables ES6 global variables AND ES6 syntax
    "worker": true
  },
  "rules": {
    "no-confusing-arrow": "error",
    "strict": "error",
    // The below are some, but not all, of the rules from eslint:recommended https://github.com/eslint/eslint/blob/master/conf/eslint-recommended.js (all errors set to warning)
    "constructor-super": [ "error" ],
    "for-direction": [ "error" ],
    "getter-return": [ "error" ],
    "no-async-promise-executor": [ "error" ],
    "no-case-declarations": [ "error" ],
    "no-class-assign": [ "error" ],
    "no-compare-neg-zero": [ "error" ],
    "no-cond-assign": [ "error" ],
    "no-const-assign": [ "error" ],
    "no-constant-condition": [ "error" ],
    "no-control-regex": [ "error" ],
    "no-debugger": [ "error" ],
    "no-delete-var": [ "error" ],
    "no-dupe-args": [ "error" ],
    "no-dupe-class-members": [ "error" ],
    "no-dupe-keys": [ "error" ],
    "no-duplicate-case": [ "error" ],
    "no-empty": [
      "error",
      { "allowEmptyCatch": true }
    ],
    "no-empty-character-class": [ "error" ],
    "no-empty-pattern": [ "error" ],
    "no-ex-assign": [ "error" ],
    "no-extra-boolean-cast": [ "error" ],
    "no-fallthrough": [ "error" ],
    "no-func-assign": [ "error" ],
    "no-global-assign": [ "error" ],
    "no-inner-declarations": [ "error" ],
    "no-invalid-regexp": [ "error" ],
    "no-misleading-character-class": [ "error" ],
    "no-mixed-spaces-and-tabs": [ "error" ],
    "no-new-symbol": [ "error" ],
    "no-obj-calls": [ "error" ],
    "no-octal": [ "error" ],
    "no-prototype-builtins": [ "error" ],
    "no-redeclare": [ "error" ],
    "no-regex-spaces": [ "error" ],
    "no-self-assign": [ "error" ],
    "no-shadow-restricted-names": [ "error" ],
    "no-sparse-arrays": [ "error" ],
    "no-this-before-super": [ "error" ],
    "no-unexpected-multiline": [ "error" ],
    "no-unreachable": [ "error" ],
    "no-unsafe-finally": [ "error" ],
    "no-unsafe-negation": [ "error" ],
    "no-unused-labels": [ "error" ],
    "no-useless-catch": [ "error" ],
    "no-useless-escape": [ "error" ],
    "no-with": [ "error" ],
    "require-atomic-updates": [ "error" ],
    "require-yield": [ "error" ],
    "use-isnan": [ "error" ],
    "valid-typeof": [ "error" ],

    // Other rules
    "default-param-last": [ "error" ],

    // The below are some, but not all, of the rules from eslint-plugin-react:recommended https://github.com/yannickcr/eslint-plugin-react#recommended (all errors set to error)
    "react/display-name": [ "error" ],
    "react/jsx-no-duplicate-props": [ "error" ],
    "react/jsx-no-undef": [ "error" ],
    "react/jsx-uses-react": [ "error" ],
    "react/jsx-uses-vars": [ "error" ],
    "react/no-children-prop": [ "error" ],
    "react/no-danger-with-children": [ "error" ],
    "react/no-deprecated": [ "error" ],
    "react/no-direct-mutation-state": [ "error" ],
    "react/no-find-dom-node": [ "error" ],
    "react/no-is-mounted": [ "error" ],
    "react/no-render-return-value": [ "error" ],
    "react/no-string-refs": [ "error" ],
    "react/no-unescaped-entities": [ "error" ],
    "react/no-unknown-property": [ "error" ],
    "react/require-render-return": [ "error" ],

    // Some additional React rules
    "react/no-danger": [ "error" ],
    "react/no-did-mount-set-state": [ "error" ],
    "react/no-did-update-set-state": [ "error" ]
  },

  "overrides": [
    {
      "files": [ "*.ts", "*.tsx" ],
      "excludedFiles": "*.generated.ts",
      "rules": {
        // The below are all rules from @typescript-eslint/eslint:recommended https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/src/configs/eslint-recommended.ts
        "getter-return": 0, //Checked by Typescript - ts(2378)
        "no-dupe-args": 0, // Checked by Typescript - ts(2300)
        "no-dupe-keys": 0, // Checked by Typescript - ts(1117)
        "no-unreachable": 0, // Checked by Typescript - ts(7027)
        "valid-typeof": 0, // Checked by Typescript - ts(2367)
        "no-const-assign": 0, // Checked by Typescript - ts(2588)
        "no-new-symbol": 0, // Checked by Typescript - ts(2588)
        "no-this-before-super": 0, // Checked by Typescript - ts(2376)
        "no-undef": 0, // This is checked by Typescript using the option `strictNullChecks`.
        "no-dupe-class-members": 0, // This is already checked by Typescript.
        "no-redeclare": 0, // This is already checked by Typescript.

        // The below is some, but not all, of the rules from @typescript-eslint/recommended https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/src/configs/recommended.json
        "@typescript-eslint/adjacent-overload-signatures": [ "error" ],
        // ban-ts-comment: "ts-expect-error is the preferred way. However, it does not always deactive error on the next line. So we also allow ts-ignore"
        "@typescript-eslint/ban-ts-comment": [
          "error",
          {
            "ts-expect-error": "allow-with-description",
            "ts-ignore": "allow-with-description",
            "minimumDescriptionLength": 10
          }
        ],
        "@typescript-eslint/ban-types": [
          "error",
          {
            "types": {
              // add a custom message to help explain why not to use it
              "Foo": "Don't use Foo because it is unsafe",

              // add a custom message, AND tell the plugin how to fix it
              "String": {
                "message": "Use string instead",
                "fixWith": "string"
              },

              "{}": {
                "message": "Use 'unknown' instead",
                "fixWith": "unknown"
              }
            }
          }
        ],
        "camelcase": "off",
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "default",
            "format": [ "camelCase" ]
          },
          {
            "selector": "parameter",
            "format": [ "camelCase" ],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "classMethod",
            "format": [ "camelCase" ],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "typeLike",
            "format": [ "PascalCase" ]
          },
          {
            "selector": "interface",
            "format": [ "PascalCase" ],
            "prefix": [ "I" ]
          },
          {
            "selector": "typeParameter",
            "format": [ "PascalCase" ]
          },
          {
            "selector": "typeProperty",
            "format": [ "camelCase" ]
          },
          {
            // "global" variables in TypeScript are only global within current file
            // thus not externally visible ==> camelCase
            "selector": "variable",
            "modifiers": [ "global", "const" ],
            "format": [ "camelCase" ]
          },
          {
            // Externally visible (=exported) variables should be PascalCased.
            "selector": "variable",
            "modifiers": [ "exported" ],
            "format": [ "PascalCase" ]
          },
          {
            "selector": "objectLiteralProperty",
            "format": [ "camelCase", "PascalCase" ],
            "leadingUnderscore": "allowDouble"
          },
          {
            "selector": [ "classMethod" ],
            "modifiers": [ "public" ],
            "format": [ "PascalCase" ]
          },
          {
            "selector": [ "enumMember" ],
            "format": [ "PascalCase" ]
          },
          {
            "selector": [ "accessor" ],
            "format": [ "PascalCase" ]
          },
          {
            "selector": [ "classProperty" ],
            "modifiers": [ "public" ],
            "format": [ "PascalCase" ]
          },
          {
            "selector": [ "classProperty" ],
            "modifiers": [ "private" ],
            "format": [ "PascalCase" ],
            "prefix": [ "m" ]
          },
          {
            "selector": [ "classProperty" ],
            "modifiers": [ "private", "static" ],
            "format": [ "PascalCase" ],
            "prefix": [ "g" ]
          }
        ],
        "@typescript-eslint/explicit-member-accessibility": [ "error" ],
        "@typescript-eslint/consistent-type-assertions": [ "error" ],
        "@typescript-eslint/member-delimiter-style": [ "error" ],
        "no-array-constructor": 0,
        "@typescript-eslint/no-array-constructor": [ "error" ],
        "no-empty-function": 0,
        "@typescript-eslint/no-empty-function": [
          "error",
          { "allow": [ "constructors", "arrowFunctions" ] }
        ],
        "@typescript-eslint/no-empty-interface": [ "error" ],
        "@typescript-eslint/no-explicit-any": [
          "error",
          {
            "ignoreRestArgs": true,
            "fixToUnknown": true
          }
        ],
        "@typescript-eslint/no-inferrable-types": [
          "off",
          {
            "ignoreProperties": false,
            "ignoreParameters": true
          }
        ],
        "@typescript-eslint/no-misused-new": [ "error" ],
        "@typescript-eslint/no-namespace": [ "error" ],
        "@typescript-eslint/no-non-null-assertion": [ "error" ],
        "@typescript-eslint/no-this-alias": [ "error" ],
        "no-unused-vars": 0,
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "ignoreRestSiblings": true,
            "argsIgnorePattern": "^_",
            "varsIgnorePattern": "ModelTs"
          }
        ],
        "no-use-before-define": 0,
        "@typescript-eslint/no-use-before-define": [ "error" ],
        "@typescript-eslint/no-var-requires": [ "error" ],
        "@typescript-eslint/prefer-namespace-keyword": [ "error" ],
        "@typescript-eslint/triple-slash-reference": [ "error" ],
        "@typescript-eslint/type-annotation-spacing": [ "error" ],
        "@typescript-eslint/explicit-function-return-type": [ "error" ],
        "no-var": [ "error" ],
        "prefer-const": [
          "error",
          { "destructuring": "all" }
        ],
        "prefer-rest-params": [ "error" ],
        "prefer-spread": [ "error" ],

        // Following rules were enforced by TSLint
        "no-trailing-spaces": [
          "error",
          {
            "skipBlankLines": true,
            "ignoreComments": true
          }
        ],
        "no-multiple-empty-lines": [
          "error",
          { "max": 1 }
        ],
        "comma-dangle": [ "error", "always-multiline" ],
        "eqeqeq": [
          "error",
          "always",
          { "null": "ignore" }
        ],

        // Rules to prevent function(); use fat arrow => instead; cf. https://eslint.org/docs/rules/func-style
        "prefer-arrow/prefer-arrow-functions": [
          "error",
          {
            "disallowPrototype": true,
            "singleReturnOnly": false,
            "classPropertiesAllowed": false
          }
        ],
        "prefer-arrow-callback": [
          "error",
          { "allowNamedFunctions": true }
        ],
        "func-style": [
          "error",
          "expression",
          { "allowArrowFunctions": true }
        ],

        "func-names": [ "error", "always" ],

        "no-unused-expressions": 0,
        "@typescript-eslint/no-unused-expressions": [
          "error",
          { "allowShortCircuit": true }
        ],
        "max-len": [
          "error",
          {
            "code": 160,
            "ignorePattern": "eslint-disable-line",
            "ignoreRegExpLiterals": true,
            "ignoreUrls": true
          }
        ],
        "no-console": "error"
      }
    }
  ]
}
